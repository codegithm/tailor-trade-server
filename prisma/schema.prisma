// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  TAILOR
}

enum DesignCategory {
  FORMAL
  BUSINESS
  CASUAL
  SEMI_FORMAL
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  name             String
  role             UserRole
  password         String
  avatarUrl        String?
  bio              String?
  location         String?
  designs          Design[]        @relation("TailorDesigns")
  customRequests   CustomRequest[] @relation("CustomerRequests")
  bids             Bid[]           @relation("TailorBids")
  chatRooms        ChatRoom[]      @relation("ChatRoomParticipants")
  sentMessages     ChatMessage[]   @relation("sentMessages")
  receivedMessages ChatMessage[]   @relation("receivedMessages")
  measurements     Measurement[]
  streamId         String?
  chatChannels     ChatChannel[]   @relation("ChannelParticipants")
  // New fields for better auth
  emailVerified    Boolean         @default(false)
  verificationToken String?        @unique
  resetToken       String?         @unique
  resetTokenExpiry DateTime?
  refreshToken     String?
  acceptedRequests CustomRequest[] @relation("AcceptedTailor")
  notifications    Notification[]
}

model Design {
  id             String    @id @default(uuid())
  tailor         User      @relation("TailorDesigns", fields: [tailorId], references: [id])
  tailorId       String
  title          String
  description    String
  price          Int
  imageUrls      String[]
  category       DesignCategory
  fabricType     String
  created        DateTime @default(now())
  availableSizes String[]
  tags           String[]
  chatChannels   ChatChannel[]
}

model CustomRequest {
  id            String         @id @default(uuid())
  customer      User           @relation("CustomerRequests", fields: [customerId], references: [id])
  customerId    String
  bids          Bid[]
  title         String
  description   String
  proposedPrice Int
  status        String
  created       DateTime
  deadline      DateTime?
  messages      ChatMessage[]
  imageUrl      String?
  acceptedTailor   User?      @relation("AcceptedTailor", fields: [acceptedTailorId], references: [id])
  acceptedTailorId String?
  notifications    Notification[]
}

model Bid {
  id        String         @id
  request   CustomRequest  @relation(fields: [requestId], references: [id])
  requestId String
  tailor    User           @relation("TailorBids", fields: [tailorId], references: [id])
  tailorId  String
  price     Int
  message   String
  created   DateTime
  status    String
}

model ChatRoom {
  id              String         @id
  participants    User[]         @relation("ChatRoomParticipants")
  lastMessage     String?
  lastMessageTime DateTime?
  unreadCount     Int
  messages        ChatMessage[]
}

model ChatMessage {
  id           String         @id
  chatRoom     ChatRoom       @relation(fields: [chatRoomId], references: [id])
  chatRoomId   String
  sender       User           @relation("sentMessages", fields: [senderId], references: [id])
  senderId     String
  recipient    User           @relation("receivedMessages", fields: [recipientId], references: [id])
  recipientId  String
  content      String
  timestamp    DateTime
  read         Boolean
  request      CustomRequest? @relation(fields: [requestId], references: [id])
  requestId    String?
}

model Measurement {
  id          String   @id
  customer    User     @relation(fields: [customerId], references: [id])
  customerId  String
  chest       Float
  waist       Float
  hip         Float
  inseam      Float
  shoulder    Float
  arm         Float
  height      Float
  weight      Float
  neck        Float
  thigh       Float?
  calf        Float?
  bicep       Float?
  forearm     Float?
  wrist       Float?
  ankle       Float?
  aiProcessed Boolean
  created     DateTime
  updated     DateTime
}

model ChatChannel {
  id           String   @id @default(uuid())
  streamId     String   @unique // Stream channel ID
  participants User[]   @relation("ChannelParticipants")
  designId     String?
  design       Design?  @relation(fields: [designId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Notification {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  request     CustomRequest? @relation(fields: [requestId], references: [id])
  requestId   String?
}

model Log {
  id           String   @id @default(uuid())
  timestamp    DateTime @default(now())
  userId       String?  // Optional: null for unauthenticated requests
  method       String
  route        String
  status       Int
  requestBody  String?
  responseBody String?
  error        String?
}

model Category {
  id       String         @id @default(uuid())
  key      DesignCategory @unique
  label    String
}
