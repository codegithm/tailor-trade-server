
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  password: 'password',
  avatarUrl: 'avatarUrl',
  bio: 'bio',
  location: 'location',
  streamId: 'streamId',
  emailVerified: 'emailVerified',
  verificationToken: 'verificationToken',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  refreshToken: 'refreshToken'
};

exports.Prisma.DesignScalarFieldEnum = {
  id: 'id',
  tailorId: 'tailorId',
  title: 'title',
  description: 'description',
  price: 'price',
  imageUrls: 'imageUrls',
  category: 'category',
  fabricType: 'fabricType',
  created: 'created',
  availableSizes: 'availableSizes',
  tags: 'tags'
};

exports.Prisma.CustomRequestScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  title: 'title',
  description: 'description',
  proposedPrice: 'proposedPrice',
  status: 'status',
  created: 'created',
  deadline: 'deadline',
  imageUrl: 'imageUrl',
  acceptedTailorId: 'acceptedTailorId'
};

exports.Prisma.BidScalarFieldEnum = {
  id: 'id',
  requestId: 'requestId',
  tailorId: 'tailorId',
  price: 'price',
  message: 'message',
  created: 'created',
  status: 'status'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  lastMessage: 'lastMessage',
  lastMessageTime: 'lastMessageTime',
  unreadCount: 'unreadCount'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  chatRoomId: 'chatRoomId',
  senderId: 'senderId',
  recipientId: 'recipientId',
  content: 'content',
  timestamp: 'timestamp',
  read: 'read',
  requestId: 'requestId'
};

exports.Prisma.MeasurementScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  chest: 'chest',
  waist: 'waist',
  hip: 'hip',
  inseam: 'inseam',
  shoulder: 'shoulder',
  arm: 'arm',
  height: 'height',
  weight: 'weight',
  neck: 'neck',
  thigh: 'thigh',
  calf: 'calf',
  bicep: 'bicep',
  forearm: 'forearm',
  wrist: 'wrist',
  ankle: 'ankle',
  aiProcessed: 'aiProcessed',
  created: 'created',
  updated: 'updated'
};

exports.Prisma.ChatChannelScalarFieldEnum = {
  id: 'id',
  streamId: 'streamId',
  designId: 'designId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  read: 'read',
  createdAt: 'createdAt',
  requestId: 'requestId'
};

exports.Prisma.LogScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  userId: 'userId',
  method: 'method',
  route: 'route',
  status: 'status',
  requestBody: 'requestBody',
  responseBody: 'responseBody',
  error: 'error'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  key: 'key',
  label: 'label'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  TAILOR: 'TAILOR'
};

exports.DesignCategory = exports.$Enums.DesignCategory = {
  FORMAL: 'FORMAL',
  BUSINESS: 'BUSINESS',
  CASUAL: 'CASUAL',
  SEMI_FORMAL: 'SEMI_FORMAL'
};

exports.Prisma.ModelName = {
  User: 'User',
  Design: 'Design',
  CustomRequest: 'CustomRequest',
  Bid: 'Bid',
  ChatRoom: 'ChatRoom',
  ChatMessage: 'ChatMessage',
  Measurement: 'Measurement',
  ChatChannel: 'ChatChannel',
  Notification: 'Notification',
  Log: 'Log',
  Category: 'Category'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
